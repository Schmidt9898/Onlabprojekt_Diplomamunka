/*
Spawn_stopper("3d tiling with zeroing");
#pragma omp target teams
{
    //printf("size0,size1  %d",size1);
#pragma omp distribute parallel for collapse(3)
    for(size_t x=blockhalf;x<sizex;x+=blocksize)
    {
        for(size_t y=blockhalf;y<sizey;y+=blocksize)
        {
            for(size_t z=blockhalf;z<sizey;z+=blocksize)
            {

                #pragma omp parallel for collapse(3)
                for(size_t bx=x-blockhalf;bx<x+blockhalf;bx++)
                {
                    for(size_t by=y-blockhalf;by<y+blockhalf;by++)
                    {
                        for(size_t bz=z-blockhalf;bz<z+blockhalf;bz++)
                        {
                            data_[bx][by][bz]=0;
                        }
                    }
                }
            }        
        }
    }
} 
Kill_stopper();
*/



/*
Spawn_stopper("compute simple parallel");
#pragma omp target teams distribute parallel for 
    for(uint i=0;i<meret;i++)
    {
        data[i]=0;
    }
Kill_stopper();

int sum_threads=0;
Spawn_stopper("spawn team of thread");
#pragma omp target teams reduction(+:sum_threads) num_teams(1024) thread_limit(10) //distribute parallel for 
    {
        //printf(" %d \n",omp_get_team_size(omp_get_active_level()));
        #pragma omp parallel for reduction(+:sum_threads)
        for(size_t i = 0;i<10;i++)
            sum_threads++;
    }
printf("\nsum of threads: %d\n\n",sum_threads);
Kill_stopper();

Spawn_stopper("compute 10 team_thread");
#pragma omp target teams num_teams(10)
{
#pragma omp distribute parallel for //simd
    for(uint i=0;i<meret;i++)
    {
        data[i]=0;
    }
}
Kill_stopper();

Spawn_stopper("compute ");
#pragma omp target teams 
{
#pragma omp distribute parallel for
    for(uint i=0;i<meret;i+=8)
    {
        #pragma omp parallel for simd
        for(ushort i2=0;i2<8;i2++)
            data[i+i2]=1;
    }
}
Kill_stopper();
*/


/*
Spawn_stopper("3d tiling with zeroing");
#pragma omp target teams
{
    //printf("size0,size1  %d",size1);
#pragma omp distribute parallel for collapse(3)
    for(size_t x=blockhalf;x<sizex;x+=blocksize)
    {
        for(size_t y=blockhalf;y<sizey;y+=blocksize)
        {
            for(size_t z=blockhalf;z<sizey;z+=blocksize)
            {

                #pragma omp parallel for collapse(3)
                for(size_t bx=x-blockhalf;bx<x+blockhalf;bx++)
                {
                    for(size_t by=y-blockhalf;by<y+blockhalf;by++)
                    {
                        for(size_t bz=z-blockhalf;bz<z+blockhalf;bz++)
                        {
                            data_[bx][by][bz]=0;
                        }
                    }
                }
            }        
        }
    }
} 
Kill_stopper();
*/


/*{
    
    #pragma omp teams distribute parallel for 
    for(size_t i=0;i<meret;i++)
    {
        data[i]=data[i]+1;
    }
}*/




    for(int x=0;x<sizex;x++)
    {
        for(int y=0;y<sizey;y++)
        {
            for(int z=0;z<sizez;z++)
            {
// sum for the scope of the window..
                for(int ibx=x-window_size;ibx<x+window_size;ibx++)
                for(int iby=y-window_size;iby<y+window_size;iby++)
                for(int ibz=z-window_size;ibz<z+window_size;ibz++)
                    {
                    if(ibx>=0 && ibx < sizex &&
                        iby>=0 && iby < sizey &&
                        ibz>=0 && ibz < sizez){
                            out_[x][y][z]+=data_[ibx][iby][ibz];
                            //printf("good?\n");
                        }else
                        {
                            //printf("not good\n");
                        }
                }

                bejgli









------------------------
#ifdef LOMP
#pragma omp target teams //num_teams(128) thread_limit(1024) 
#pragma omp distribute parallel for collapse(6)
#endif
#ifdef LACC
#pragma acc parallel loop deviceptr(out_,data_) tile(sizex,sizey,sizez)
    for (int x = 0; x < sizex; x += blocksize_x)
    {
        for (int y = 0; y < sizey; y += blocksize_y)
        {
            for (int z = 0; z < sizez; z += blocksize_z)
            {
                //#pragma omp parallel for collapse(3)
                for (int bx = x; bx < x + blocksize_x; bx++)
                {
                    for (int by = y; by < y + blocksize_y; by++)
                    {
                        for (int bz = z; bz < z + blocksize_z; bz++)
                        {
                            //kernel starts here
                            // sum for the scope of the window..
                            if (bx >= 0 && bx < sizex &&
                                by >= 0 && by < sizey &&
                                bz >= 0 && bz < sizez)
                            {
                                for (int ibx = bx - window_size; ibx <= (bx + window_size); ibx++)
                                    for (int iby = by - window_size; iby <= (by + window_size); iby++)
                                        for (int ibz = bz - window_size; ibz <= (bz + window_size); ibz++)
                                        {
                                            if (ibx >= 0 && ibx < sizex &&
                                                iby >= 0 && iby < sizey &&
                                                ibz >= 0 && ibz < sizez)
                                            {
                                                //printf("talÃ¡lt  ");

                                                //out_[bx][by][bz] += data_[ibx][iby][ibz];
                                                
                                                //out_[bx][by][bz]=0;
                                            }

                                            //printf("x:%d,y:%d,z:%d\n",ibx,iby,ibz);
                                        }
                            }//kernel ends here
                        }
                    }
                }
            }
        }
    }

#endif
-------------


    /*for (int ibx = x - window_size; ibx < x + window_size; ibx++){
        for (int iby = y - window_size; iby < y + window_size; iby++){
            for (int ibz = z - window_size; ibz < z + window_size; ibz++)
            {
                

                //printf(" %lu,%lu,%lu   ",bx,by,bz);
                if (ibx >= 0 && ibx < sizex &&
                    iby >= 0 && iby < sizey &&
                    ibz >= 0 && ibz < sizez )
                {
                    out2_[x][y][z] += data_[ibx][iby][ibz];
                }else
                {
                    //printf("NOOOO\n");
                }
            }
        }
    }*/
-----------------
/*
int left=65535;
Spawn_stopper("blocking");

//#pragma omp task
for(int team_i=0;team_i<team_num;team_i+=65535)
{
if(team_i+65535>team_num)
    left=team_i-65535;
#pragma omp target teams num_teams(984375) thread_limit(blocksize_x*blocksize_y*blocksize_z)
#pragma omp parallel  
{
    int bid,tid;
    bid=omp_get_team_num();
    tid=omp_get_thread_num();
    int x,y,z;

    z=bid/(blockdbx*blockdby)*blocksize_z;
    bid-=(bid/(blockdbx*blockdby))*blockdbx*blockdby;
    y=(bid/blockdbx)*blocksize_y;
    x=bid%blockdbx*blocksize_x;
    //printf("nyersen %d %d %d\n",x,y,z);
    z+=tid/(blocksize_x*blocksize_y);
    tid-=(tid/(blocksize_x*blocksize_y))*(blocksize_x*blocksize_y);
    //printf("%d\n",tid);
    y+=(tid/blocksize_x);
    x+=tid%blocksize_x;
    
    if(omp_get_team_num()==65535)
    {
        printf(" %d,%d,%d   \n",x,y,z);
    }
    if(x==0 && y==0 && z==12)
                {
                    printf(" %d,%d,%d   \n",x,y,z);
                }


    //printf("kord %d %d %d\n",x,y,z);
    //kernel start
    // sum for the scope of the window..
    for (int ibx = x - window_size; ibx < x + window_size; ibx++){
        for (int iby = y - window_size; iby < y + window_size; iby++){
            for (int ibz = z - window_size; ibz < z + window_size; ibz++)
            {
                if(x==0 && y==0 && z==12)
                {
                    printf(" %lu,%lu,%lu   ",ibx,iby,ibz);
                }


                //printf(" %lu,%lu,%lu   ",bx,by,bz);
                if (ibx >= 0 && ibx < sizex &&
                    iby >= 0 && iby < sizey &&
                    ibz >= 0 && ibz < sizez &&
                    x >= 0 && x < sizex &&
                    y >= 0 && y < sizey &&
                    z >= 0 && z < sizez)
                {
                    out2_[x][y][z] += data_[ibx][iby][ibz];
                }else
                {
                    //printf("NOOOO\n");
                }
            }
        }
    }

           //printf("ertek:%d %d %d:  %f \n",x,y,z,out2_[x][y][z]);
    //kernel end
}


Kill_stopper();
*/
----------------



//////////////////////////////////////////////////////////////////////////////////////////////////////////////
/*
#ifdef LOMP

//sizex = 5;
//sizey = 5;
//sizez = 5;

//int bsx=2,bsy=2,bsz=2;


int blockdbx=sizex/blocksize_x+((sizex%blocksize_x!=0)?1:0);
int blockdby=sizey/blocksize_y+((sizey%blocksize_y!=0)?1:0);
int blockdbz=sizez/blocksize_z+((sizez%blocksize_z!=0)?1:0);
printf("block number dim %d %d %d\n",blockdbx,blockdby,blockdbz);
printf("thread_num %d \n",blocksize_x*blocksize_y*blocksize_z);
printf("team_num %d \n",blockdbx*blockdby*blockdbz);
int team_num=blockdbx*blockdby*blockdbz;
int thread_limit=blocksize_x*blocksize_y*blocksize_z;


Spawn_stopper("2 loop blocking hack");
#pragma omp target teams distribute parallel for collapse(2) thread_limit(thread_limit) private(blockdbx,blockdbx,blockdbx)
for(int bid=0;bid<team_num;bid++)
    for(int tid=0;tid<thread_limit;tid++)
    {

    //bid=omp_get_team_num();
    //tid=omp_get_thread_num();
    int x,y,z;
    //printf("nyersen %d %d\n",bid,tid);

    z=bid/(blockdbx*blockdby)*blocksize_z;
    bid-=(bid/(blockdbx*blockdby))*blockdbx*blockdby;
    y=(bid/blockdbx)*blocksize_y;
    x=bid%blockdbx*blocksize_x;
    z+=tid/(blocksize_x*blocksize_y);
    tid-=(tid/(blocksize_x*blocksize_y))*(blocksize_x*blocksize_y);
    //printf("%d\n",tid);
    y+=(tid/blocksize_x);
    x+=tid%blocksize_x;
    //printf("kord %d %d %d\n",x,y,z);
   
    if(omp_get_team_num()==65535)
    {
        printf(" %d,%d,%d   \n",x,y,z);
    }
    if(x==0 && y==0 && z==12)
                {
                    printf(" %d,%d,%d   \n",x,y,z);
                }


    //kernel start
    // sum for the scope of the window..
    if(x >= window_size && x < sizex-window_size &&
                    y >= window_size && y < sizey-window_size &&
                    z >= window_size && z < sizez-window_size){

                        out2_[x][y][z]+=
				data_[x][y][z-4]+data_[x][y][z-3]+data_[x][y][z-2]+data_[x][y][z-1]+
				data_[x][y][z+4]+data_[x][y][z+3]+data_[x][y][z+2]+data_[x][y][z+1]+
				data_[x][y-4][z]+data_[x][y-3][z]+data_[x][y-2][z]+data_[x][y-1][z]+
				data_[x][y+4][z]+data_[x][y+3][z]+data_[x][y+2][z]+data_[x][y+1][z]+
				data_[x-4][y][z]+data_[x-3][y][z]+data_[x-2][y][z]+data_[x-1][y][z]+
				data_[x+4][y][z]+data_[x+3][y][z]+data_[x+2][y][z]+data_[x+1][y][z];
    }

           //printf("ertek:%d %d %d:  %f \n",x,y,z,out2_[x][y][z]);
    //kernel end

    }

    Kill_stopper();

#endif

*/




/*
#ifdef LOMP

sizex = 5;
sizey = 5;
sizez = 5;

int bsx=2,bsy=2,bsz=2;

int blockdbx=sizex/bsx+1;
int blockdby=sizey/bsy+1;
int blockdbz=sizez/bsz+1;


#pragma omp target teams num_teams(blockdbx*blockdby*blockdbz) thread_limit(bsx*bsy*bsz)
#pragma omp parallel 
{
    int bid,tid;
    bid=omp_get_team_num();
    tid=omp_get_thread_num();
    int x,y,z;

    z=bid/(blockdbx*blockdby)*bsz;
    bid-=(bid/(blockdbx*blockdby))*blockdbx*blockdby;
    y=(bid/blockdbx)*bsy;
    x=bid%blockdbx*bsx;
    printf("nyersen %d %d %d\n",x,y,z);
    z+=tid/(bsx*bsy);
    tid-=(tid/(bsx*bsy))*(bsx*bsy);
    //printf("%d\n",tid);
    y+=(tid/bsx);
    x+=tid%bsx;




//    y+=(tid/bsx);
  //  x+=tid%bsx;
    //printf("asd\n");
    //printf("omp_get_num_threads = %d\n",omp_get_num_threads());
    //printf("ez = %d\n",omp_get_team_num());
    printf("%d %d %d\n",x,y,z);
}




#endif

*/



//////////////////////////////////////////////////////////////////////////////////////////////////////////////


